#include <bits/stdc++.h>
using namespace std;

// Problem: Given an integer `k` and a list of operations, find the k-th character in a string generated by a specific pattern.
// Approach: The string is generated by starting with "a" and applying operations that double the string and shift characters.

// Steps:
// 1. Start with the string "a".
// 2. For each operation, double the string and apply a shift based on the operation type.
// 3. The operations are represented as integers, where 1 means shift the character by one position in the alphabet.
// 4. The k-th character can be found by calculating the effective shift after all operations.
// 5. The final character is determined by the initial character 'a' and the total shift applied.
// 6. The function returns the k-th character as the result.

// Time Complexity: O(n), where n is the number of operations.
// Space Complexity: O(n), for storing the lengths of the generated strings.

class Solution {
public:
    char kthCharacter(long long k, vector<int>& operations) {
        int shift = 0;
        vector<long long> lengths;
        long long len = 1;

        for (int op : operations) {
            len *= 2;
            lengths.push_back(len);
            if (len >= k) break;
        }

        for (int i = lengths.size() - 1; i >= 0; --i) {
            long long half = lengths[i] / 2;
            int op = operations[i];
            if (k > half) {
                k -= half;
                if (op == 1) shift++;
            }
        }

        return (char)((('a' - 'a' + shift) % 26) + 'a');
    }
};